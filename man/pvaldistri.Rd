% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pvaldistri.R
\name{pvaldistri}
\alias{pvaldistri}
\title{pvaldistri}
\usage{
pvaldistri(distridetecrate, detectionratesignature)
}
\arguments{
\item{distridetecrate}{numeric vector of distribution rate of the set of random signature that have the same size that the signature of interest.}

\item{detectionratesignature}{(numeric) detection rate of the signature of interest}
}
\value{
return a numeric value which represent the probability that this detection rate can be observed with a random signature.
 If the value is negative, it only means that the detection rate is lower than the median detection rate for random signatures of the same size than the tested signature. 
In the opposite case, the value is positive.
}
\description{
compute the p-value associated to a detection rate for a biological signature under the null hypothesis that this signature is equivalent to a random signature.
}
\examples{
require(Seurat)


platelet <- read.table(GenicSignature_example("platelet_signature"),header=FALSE)[[1]]

used_expr_mat <- processPBMC@assays$SCT@counts
echantillonnage <- replicate(100,sample(rownames(used_expr_mat),
length(intersect(rownames(used_expr_mat),platelet))),simplify = FALSE)

echantillonnage <- lapply(echantillonnage,function(x){which(rownames(used_expr_mat) \%in\% x)})



test <- apply(used_expr_mat,2,function(z){ droplets <- z ; 
percentages <- lapply(echantillonnage,function(y){
(length(which(droplets[y]>0))/length(droplets[y]))*100}) 
return(percentages)
})

test <- lapply(test,unlist)


names(test) <- colnames(used_expr_mat)


mean_random_detection_rate_per_cell <- lapply(test,mean) 

mean_random_detection_rate_per_cell <- unlist(mean_random_detection_rate_per_cell)
detection_rate_signature <- apply(used_expr_mat,2,
function(z){return((length(
which(z[which(rownames(used_expr_mat) \%in\% intersect(rownames(used_expr_mat),platelet))]>0)
)/length(z[which(rownames(used_expr_mat) \%in\% intersect(rownames(used_expr_mat),platelet))]))*100)})


pvaltoret <- purrr::pmap(.l = list(random = test , signature = detection_rate_signature),
.f = function(random,signature){return(pvaldistri(random,signature))})





pvaltoret <- unlist(pvaltoret)

fdrtoret <- stats::p.adjust(abs(pvaltoret),method = "BH", n = length(pvaltoret))


}
